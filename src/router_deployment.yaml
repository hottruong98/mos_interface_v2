# 
apiVersion: apps/v1  # Specifies the API version for the deployment resource in Kubernetes.
kind: Deployment     # Defines the type of resource. In this case, it's a Deployment, which manages a set of identical pods.
metadata:
  name: speed-suggest-sub  # The name of the deployment. This is used to identify the deployment within the Kubernetes cluster.
  labels:               # Labels are key-value pairs used to organize and select resources.
    app: speed-suggest-sub # Label with key 'app' and value 'metaserver-app'. Useful for selecting the deployment's pods.
spec:
  replicas: 1           # Specifies that only one replica (pod) of the application should run.
  selector:
    matchLabels:
      app: speed-suggest-sub  # The selector uses the label to find which pods are managed by this deployment.
  template:
    metadata:
      labels:
        app: speed-suggest-sub  # Labels applied to the pods created by this deployment.
    spec:
      containers:
      - name: speed-suggest-sub  # The name of the container running within the pod.
        image: docker.io/kaistmos/speed_suggest_sub:latest  # The Docker image to use for this container. It includes the application and all dependencies.
        env:                 # Defines environment variables that are passed to the container.
        - name: RABBITMQ_HOST
          value: "mos-rabbitmqcluster.default.svc.cluster.local"  # Hostname for connecting to the RabbitMQ service within the cluster.
        - name: RABBITMQ_PORT
          value: "5672"  # The port on which RabbitMQ is listening.
        - name: RABBITMQ_USER
          value: "mos"  # Username for authenticating with RabbitMQ.
        - name: RABBITMQ_PASSWORD
          value: "mos"  # Password for authenticating with RabbitMQ.
        - name: PYTHONUNBUFFERED
          value: "1"
        ports:
        - containerPort: 50051  # The port on which the application inside the container will listen for incoming connections.
      restartPolicy: Always  # Specifies that the container should always be restarted if it fails.